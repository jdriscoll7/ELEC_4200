KCPSM6 Assembler log file for program '\\sage.eng.auburn.edu\homes\desktop\class\4200_lab\final\assembly\final_project.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 14 Nov 2018
Assembly timestamp: 19:14:10

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: F8C hex
Nominal program memory size: 4K (4096)   address(11:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 68
Memory locations available: 4028


Assembly listing

 Addr Code                          Instruction

 000                                ; Format for seven-segment display definitions.
 000                                ;
 000                                ; [X] [X] [X] [X] [digit_3] [digit_2] [digit_1] [digit_0]
 000                                ;
 000                                ; Digit definitions - one-hot for activating digits of display.
 000                                CONSTANT digit_3, 08
 000                                CONSTANT digit_2, 04
 000                                CONSTANT digit_1, 02
 000                                CONSTANT digit_0, 01
 000                                ;
 000                                ;
 000                                ; Scratchpad memory addresses used to hold the four hex values.
 000                                CONSTANT stored_value_0, 00
 000                                CONSTANT stored_value_1, 01
 000                                CONSTANT stored_value_2, 02
 000                                CONSTANT stored_value_3, 03
 000                                ;
 000                                ; Enable interrupts for the program to work.
 000  28001                         ENABLE INTERRUPT
 001                                ;
 001                                ;
 001                          main: 
 001                                ; Scroll ELEC 4200 character sequence.
 001                                ;
 001                                ;
 001                                ;
 001                                ;
 001                                ; Display stored values.
 001  20003                         CALL 003[display_stored_values]
 002  22001                         JUMP 001[main]
 003                                ;
 003                                ;
 003                                ;
 003                                ;
 003                                ;
 003                                ;
 003                                ;
 003                                ;
 003                                ;
 003                                ; Function display_stored_values
 003                                ;
 003                                ; Displays four stored values on segments.
 003                                ;
 003                                ;
 003                                CONSTANT digit_max, 08
 003                                CONSTANT delay_multiplier, FF
 003                                ;
 003                                ;
 003         display_stored_values: 
 003  01101                         LOAD s1, 01                                      ; Chooses which digit to display.
 004  01200                         LOAD s2, 00                                      ; Register for counting.
 005  01300                         LOAD s3, 00                                      ; Memory address of value to display.
 006                    delay_loop: 
 006                                ; Set up registers s0 and s1 for putchar call.
 006  0A030                         FETCH s0, (s3)
 007  20012                         CALL 012[putchar]
 008  1D108                         COMPARE s1, 08[digit_max]
 009  14106                         SL0 s1
 00A  11301                         ADD s3, 01
 00B  36006                         JUMP NZ, 006[delay_loop]
 00C                                ; Increment loop count and reset digit to display.
 00C  01101                         LOAD s1, 01
 00D  01300                         LOAD s3, 00
 00E  11201                         ADD s2, 01
 00F  1D2FF                         COMPARE s2, FF[delay_multiplier]
 010  36006                         JUMP NZ, 006[delay_loop]
 011  25000                         RETURN 
 012                                ; Function putchar
 012                                ;
 012                                ;     - NOTE: Only handles characters 0-F and "C", "E", and "L".
 012                                ;
 012                                ;     - Input:
 012                                ;         - s0: Character to print - is destroyed after function.
 012                                ;         - s1: Display to print on.
 012                                ;
 012                                ;     - Uses s0 + s1 for input and s2 + s3 for table indexing.
 012                                ;
 012                                ;
 012                       putchar: 
 012  37001                         REGBANK B
 013                                ; Determine if input is a number or a letter (see NOTE for supported characters).
 013  1D015                         COMPARE s0, 15                                   ; If input is greater than 15, then it is a character.
 014  3A01E                         JUMP C, 01E[is_number]                           ; Jump to is_number label if input less than 15.
 015                                ;
 015                                ; Basically a switch statement to decode ASCII character - all supported characters are here.
 015                                ;
 015                       C_check: 
 015  1D043                         COMPARE s0, 43["C"]                              ; Compare to C.
 016  36019                         JUMP NZ, 019[E_check]                            ; If it is not C, check for E.
 017  0100C                         LOAD s0, 0C                                      ; Set index for C in table.
 018  2201E                         JUMP 01E[is_number]                              ; Continue to is_number to index table.
 019                       E_check: 
 019  1D045                         COMPARE s0, 45["E"]
 01A  3601D                         JUMP NZ, 01D[L_check]
 01B  0100E                         LOAD s0, 0E
 01C  2201E                         JUMP 01E[is_number]
 01D                       L_check: 
 01D  01010                         LOAD s0, 10
 01E                                ;
 01E                                ;
 01E                     is_number: 
 01E  01200                         LOAD s2, 00[putchar_decode'upper]                ; Upper bound of table.
 01F  01326                         LOAD s3, 26[putchar_decode'lower]                ; Lower bound of table.
 020  10300                         ADD s3, s0                                       ; Index the table.
 021  13200                         ADDCY s2, 00                                     ; Add carry from right half.
 022  24230                         CALL@ (s2, s3)                                   ; Return hex value in s0.
 023                                ;
 023                                ; Writes seven segment pattern to display.
 023                                ;
 023  2C010                         OUTPUT s0, (s1)
 024  37000                         REGBANK A
 025  25000                         RETURN 
 026                                ; Function putchar_decode
 026                                ;
 026                                ;    - Holds a table of seven-segment display values.
 026                                ;
 026                                ;    - Access elements in table with CALL@ (decode_table'upper, decode_table'lower + index).
 026                                ;
 026                                TABLE putchar_character_decode#, [40,79,24,30,19,12,02,78,00,10,08,03,44,21,06,0E,38]
 026                putchar_decode: 
 026                                ;
 026  21040                         LOAD&RETURN s0, 40[putchar_character_decode#:40]
 027  21079                         LOAD&RETURN s0, 79[putchar_character_decode#:79]
 028  21024                         LOAD&RETURN s0, 24[putchar_character_decode#:24]
 029  21030                         LOAD&RETURN s0, 30[putchar_character_decode#:30]
 02A  21019                         LOAD&RETURN s0, 19[putchar_character_decode#:19]
 02B  21012                         LOAD&RETURN s0, 12[putchar_character_decode#:12]
 02C  21002                         LOAD&RETURN s0, 02[putchar_character_decode#:02]
 02D  21078                         LOAD&RETURN s0, 78[putchar_character_decode#:78]
 02E  21000                         LOAD&RETURN s0, 00[putchar_character_decode#:00]
 02F  21010                         LOAD&RETURN s0, 10[putchar_character_decode#:10]
 030  21008                         LOAD&RETURN s0, 08[putchar_character_decode#:08]
 031  21003                         LOAD&RETURN s0, 03[putchar_character_decode#:03]
 032  21044                         LOAD&RETURN s0, 44[putchar_character_decode#:44]
 033  21021                         LOAD&RETURN s0, 21[putchar_character_decode#:21]
 034  21006                         LOAD&RETURN s0, 06[putchar_character_decode#:06]
 035  2100E                         LOAD&RETURN s0, 0E[putchar_character_decode#:0E]
 036  21038                         LOAD&RETURN s0, 38[putchar_character_decode#:38]
 037                                ;
 037                                ; Interrupt service routine.
 037                                ;
 037                                ;     - Used to signal to the processor that
 037                                ;       an SPI data transfer has taken place and
 037                                ;       that data should be captured.
 037                                ;
 037                                ;     - Uses s0 and s1 for all operations.
 037                                ;         - s0: Used for data input.
 037                                ;         - s1: Holds masked address data.
 037                                ;         - s2: Holds masked value data.
 037                                ;
 037                                ;
 F80                                ADDRESS F80                                      ; Address of interrupt vector (in specifications).
 F80  37001                         REGBANK B                                        ; Use different register bank for interrupt.
 F81                                ;
 F81                                ;
 F81                                ; Constants needed for ISR (input port number and data masks).
 F81                                CONSTANT input_port, 00
 F81                                CONSTANT digit_address_mask, 30
 F81                                CONSTANT digit_value_mask, 0F
 F81                                ;
 F81                                ;
 F81                                ;
 F81                           isr: ; Setup registers s1 and s2 and load input data into s0.
 F81  09000                         INPUT s0, 00[input_port]                         ; Place input data into s0.
 F82  01130                         LOAD s1, 30[digit_address_mask]                  ; Load register s1 with address mask.
 F83  0120F                         LOAD s2, 0F[digit_value_mask]                    ; Load register s2 with value mask.
 F84                                ;
 F84                                ; Actually perform the masking.
 F84  02100                         AND s1, s0                                       ; Extract address bits of input.
 F85  02200                         AND s2, s0                                       ; Extract value bits of input.
 F86                                ;
 F86                                ; Shift address bits of input so they are in least significant bits of register.
 F86  1410E                         SR0 s1
 F87  1410E                         SR0 s1
 F88  1410E                         SR0 s1
 F89  1410E                         SR0 s1
 F8A                                ;
 F8A                                ; Update stored value determined by address bits.
 F8A  2E210                         STORE s2, (s1)
 F8B  37000                         REGBANK A                                        ; Change register bank back to user bank.
 F8C  29001                         RETURNI ENABLE                                   ; Return from interrupt.


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

\\sage.eng.auburn.edu\homes\desktop\class\4200_lab\final\assembly\final_project.psm



List of defined constants

 CONSTANT name      Value        Source PSM File

 timestamp_hours    19'd         
 timestamp_minutes  14'd         
 timestamp_seconds  10'd         
 datestamp_year     18'd         
 datestamp_month    11'd         
 datestamp_day      14'd         
 NUL                00           
 BEL                07           
 BS                 08           
 HT                 09           
 LF                 0A           
 VT                 0B           
 CR                 0D           
 ESC                1B           
 DEL                7F           
 DCS                90           
 ST                 9C           
 digit_3            08           final_project.psm
 digit_2            04           final_project.psm
 digit_1            02           final_project.psm
 digit_0            01           final_project.psm
 stored_value_0     00           final_project.psm
 stored_value_1     01           final_project.psm
 stored_value_2     02           final_project.psm
 stored_value_3     03           final_project.psm
 digit_max          08           final_project.psm
 delay_multiplier   FF           final_project.psm
 input_port         00           final_project.psm
 digit_address_mask 30           final_project.psm
 digit_value_mask   0F           final_project.psm



List of defined tables

 TABLE name                  Table                                                 Source PSM File

 putchar_character_decode#   [40,79,24,30,19,12,02,78,00,10,08,03,44,21,06,0E,38]  final_project.psm



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "14 Nov 2018"  
 timestamp$        "19:14:10"     



List of line labels

   Label                   Addr  Source PSM File

   main                    001   final_project.psm
   display_stored_values   003   final_project.psm
   delay_loop              006   final_project.psm
   putchar                 012   final_project.psm
 * C_check                 015   final_project.psm
   E_check                 019   final_project.psm
   L_check                 01D   final_project.psm
   is_number               01E   final_project.psm
   putchar_decode          026   final_project.psm
 * isr                     F81   final_project.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             12
 STAR              -

 AND               2
 OR                -
 XOR               -

 ADD               3
 ADDCY             1
 SUB               -
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           5
 COMPARECY         -

 SL0               1
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               4
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           4

 INPUT             1
 OUTPUT            1
 OUTPUTK           -

 STORE             1
 FETCH             1

 DISABLE           -
 ENABLE            1
 RETURNI           1

 JUMP              8
 JUMP@             -
 CALL              2
 CALL@             1
 RETURN            2
 LOAD&RETURN      17

 HWBUILD           -



End of KCPSM6 log file.
