KCPSM6 Assembler log file for program 'D:\Auburn\School\Courses\ELEC4200\github\ELEC_4200\final\assembly\final_project.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 22 Nov 2018
Assembly timestamp: 01:03:33

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 40B hex
Nominal program memory size: 2K (2048)   address(10:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 47
Memory locations available: 4049


Assembly listing

 Addr Code                   Instruction

 000                         ; Format for seven-segment display definitions.
 000                         ;
 000                         ; [X] [X] [X] [X] [digit_3] [digit_2] [digit_1] [digit_0]
 000                         ;
 000                         ;
 000                         ; Enable interrupts for the program to work.
 000  28001                  ENABLE INTERRUPT
 001                         ;
 001                         ;
 001                   main: 
 001                         ; Scroll ELEC 4200 character sequence.
 001                         ;
 001                         ;
 001                         ;
 001                         ;
 001  20003                  CALL 003[display_values]
 002  22001                  JUMP 001[main]
 003                         ;
 003                         ;
 003                         ;
 003                         ;
 003                         ;
 003                         ; Function display_values
 003                         ;
 003                         ;     - Outputs each of the four stored hex values on LED's.
 003                         ;     - Register usage:
 003                         ;         - s0: stores which of stored values to display (0-3)
 003                         ;         - s1: stores which port to write the digit to
 003                         ;         - s2: stores the value stored in memory (changed by SPI)
 003                         ;         - s3 and s4: index the segment decode table
 003                         ;         - sF: holds seven segment display value
 003                         ;
 003                         ;
 003                         ;
 003         display_values: 
 003  01000                  LOAD s0, 00                                      ; Begin with first stored value.
 004  01101                  LOAD s1, 01                                      ; Write first value to first display.
 005           display_loop: 
 005  0A200                  FETCH s2, (s0)                                   ; Get value stored in memory.
 006  01300                  LOAD s3, 00[segment_decode'upper]                ; Upper bound of table.
 007  01411                  LOAD s4, 11[segment_decode'lower]                ; Lower bound of table.
 008  10420                  ADD s4, s2                                       ; Index the table.
 009  13300                  ADDCY s3, 00                                     ; Add carry from right half.
 00A  24340                  CALL@ (s3, s4)                                   ; Return hex decode value in sF.
 00B  2CF10                  OUTPUT sF, (s1)                                  ; Writes seven segment pattern to display.
 00C                         ;
 00C                         ; Keep repeating until all 4 stored values are displayed.
 00C  11001                  ADD s0, 01                                       ; Set s0 to next stored value (index).
 00D  14106                  SL0 s1                                           ; Update which display to write to.
 00E  1D004                  COMPARE s0, 04                                   ; If s0 is 4, then done.
 00F  36005                  JUMP NZ, 005[display_loop]                       ; Loop if not done.
 010  25000                  RETURN 
 011                         ;
 011                         ;
 011                         ;
 011                         ;
 011                         ;
 011                         ; Function segment_decode
 011                         ;
 011                         ;    - Holds a table of seven-segment display values.
 011                         ;
 011                         ;    - Access elements in table with CALL@ (decode_table'upper, decode_table'lower + index).
 011                         ;
 011                         ;    - Returns value in register sF.
 011                         ;
 011                         TABLE segment_character_decode#, [40,79,24,30,19,12,02,78,00,10,08,03,44,21,06,0E,38]
 011         segment_decode: 
 011                         ;
 011  21F40                  LOAD&RETURN sF, 40[segment_character_decode#:40]
 012  21F79                  LOAD&RETURN sF, 79[segment_character_decode#:79]
 013  21F24                  LOAD&RETURN sF, 24[segment_character_decode#:24]
 014  21F30                  LOAD&RETURN sF, 30[segment_character_decode#:30]
 015  21F19                  LOAD&RETURN sF, 19[segment_character_decode#:19]
 016  21F12                  LOAD&RETURN sF, 12[segment_character_decode#:12]
 017  21F02                  LOAD&RETURN sF, 02[segment_character_decode#:02]
 018  21F78                  LOAD&RETURN sF, 78[segment_character_decode#:78]
 019  21F00                  LOAD&RETURN sF, 00[segment_character_decode#:00]
 01A  21F10                  LOAD&RETURN sF, 10[segment_character_decode#:10]
 01B  21F08                  LOAD&RETURN sF, 08[segment_character_decode#:08]
 01C  21F03                  LOAD&RETURN sF, 03[segment_character_decode#:03]
 01D  21F44                  LOAD&RETURN sF, 44[segment_character_decode#:44]
 01E  21F21                  LOAD&RETURN sF, 21[segment_character_decode#:21]
 01F  21F06                  LOAD&RETURN sF, 06[segment_character_decode#:06]
 020  21F0E                  LOAD&RETURN sF, 0E[segment_character_decode#:0E]
 021  21F38                  LOAD&RETURN sF, 38[segment_character_decode#:38]
 022                         ;
 022                         ;
 022                         ;
 022                         ;
 022                         ;
 022                         ;
 022                         ; Interrupt service routine.
 022                         ;
 022                         ;     - Used to signal to the processor that
 022                         ;       an SPI data transfer has taken place and
 022                         ;       that data should be captured.
 022                         ;
 022                         ;     - Uses s0 and s1 for all operations.
 022                         ;         - s0: Used for data input.
 022                         ;         - s1: Holds masked address data.
 022                         ;         - s2: Holds masked value data.
 022                         ;
 022                         ;
 3FF                         ADDRESS 3FF                                      ; Address of interrupt vector (in specifications).
 3FF  37001                  REGBANK B                                        ; Use different register bank for interrupt.
 400                         ;
 400                         ;
 400                         ; Constants needed for ISR (input port number and data masks).
 400                         CONSTANT input_port, 00
 400                         CONSTANT digit_address_mask, 30
 400                         CONSTANT digit_value_mask, 0F
 400                         ;
 400                         ;
 400                         ;
 400                    isr: 
 400                         ; Setup registers s1 and s2 and load input data into s0.
 400  09000                  INPUT s0, 00[input_port]                         ; Place input data into s0.
 401  01130                  LOAD s1, 30[digit_address_mask]                  ; Load register s1 with address mask.
 402  0120F                  LOAD s2, 0F[digit_value_mask]                    ; Load register s2 with value mask.
 403                         ;
 403                         ; Actually perform the masking.
 403  02100                  AND s1, s0                                       ; Extract address bits of input.
 404  02200                  AND s2, s0                                       ; Extract value bits of input.
 405                         ;
 405                         ; Shift address bits of input so they are in least significant bits of register.
 405  1410E                  SR0 s1
 406  1410E                  SR0 s1
 407  1410E                  SR0 s1
 408  1410E                  SR0 s1
 409                         ;
 409                         ; Update stored value determined by address bits.
 409  2E210                  STORE s2, (s1)
 40A  37000                  REGBANK A                                        ; Change register bank back to user bank.
 40B  29001                  RETURNI ENABLE                                   ; Return from interrupt.


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

D:\Auburn\School\Courses\ELEC4200\github\ELEC_4200\final\assembly\final_project.psm



List of defined constants

 CONSTANT name      Value        Source PSM File

 timestamp_hours    01'd         
 timestamp_minutes  03'd         
 timestamp_seconds  33'd         
 datestamp_year     18'd         
 datestamp_month    11'd         
 datestamp_day      22'd         
 NUL                00           
 BEL                07           
 BS                 08           
 HT                 09           
 LF                 0A           
 VT                 0B           
 CR                 0D           
 ESC                1B           
 DEL                7F           
 DCS                90           
 ST                 9C           
 input_port         00           final_project.psm
 digit_address_mask 30           final_project.psm
 digit_value_mask   0F           final_project.psm



List of defined tables

 TABLE name                  Table                                                 Source PSM File

 segment_character_decode#   [40,79,24,30,19,12,02,78,00,10,08,03,44,21,06,0E,38]  final_project.psm



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "22 Nov 2018"  
 timestamp$        "01:03:33"     



List of line labels

   Label            Addr  Source PSM File

   main             001   final_project.psm
   display_values   003   final_project.psm
   display_loop     005   final_project.psm
   segment_decode   011   final_project.psm
 * isr              400   final_project.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD              6
 STAR              -

 AND               2
 OR                -
 XOR               -

 ADD               2
 ADDCY             1
 SUB               -
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           1
 COMPARECY         -

 SL0               1
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               4
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           2

 INPUT             1
 OUTPUT            1
 OUTPUTK           -

 STORE             1
 FETCH             1

 DISABLE           -
 ENABLE            1
 RETURNI           1

 JUMP              2
 JUMP@             -
 CALL              1
 CALL@             1
 RETURN            1
 LOAD&RETURN      17

 HWBUILD           -



End of KCPSM6 log file.
